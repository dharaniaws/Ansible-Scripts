---
- hosts: localhost
  become: yes
  gather_facts: false
  vars:
    # AWS credentials
    aws_access_key: ""
    aws_secret_key: ""

    # General configuration
    region: "us-east-2"

    # VPC configuration
    vpc_name: "Dharani_vpc"
    vpc_cidr_block: "11.0.0.0/16"

    # Internet Gateway configuration
    igw_name: "Dharani_igw"

    # Public Subnet configuration
    pubsubnet_name: "Dharani_pub"
    pubsubnet_cidr_block: "11.0.1.0/24"
    pubzone: "us-east-2a"

    # Private Subnet configuration
    pvtsubnet_name: "Dharani_pvt"
    pvtsubnet_cidr_block: "11.0.2.0/24"
    pvtzone: "us-east-2b"

    # Route Table configuration
    pubroute_table_name: "Dharani_pub_rt"
    pvtroute_table_name: "Dharani_pvt_rt"

    # Security Group configuration
    security_group_name: "Dharani_sg"
    destination_cidr_block: "0.0.0.0/0"

    # EC2 Instance configuration
    image_id: "ami-024ebc7de0fc64e44"
    type: "t2.micro"
    instance_name: "Dharani-ec"

  tasks:
    ### VPC Creation ####
    - name: Create VPC
      ec2_vpc_net:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        cidr_block: "{{ vpc_cidr_block }}"
        name: "{{ vpc_name }}"
        region: "{{ region }}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: present
      register: vpc_result

    #### Internet gateway Creation #######
    - name: Create Internet Gateway
      ec2_vpc_igw:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ igw_name }}"
      register: igw_result

    ## Create a VPC public subnet
    - name: Create Public Subnet
      ec2_vpc_subnet:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ pubzone }}"
        state: present
        cidr: "{{ pubsubnet_cidr_block }}"
        map_public: yes
        resource_tags:
          Name: "{{ pubsubnet_name }}"
      register: pubsubnet_result

    ## Create a VPC private subnet
    - name: Create Private Subnet
      ec2_vpc_subnet:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ pvtzone }}"
        state: present
        cidr: "{{ pvtsubnet_cidr_block }}"
        map_public: no
        resource_tags:
          Name: "{{ pvtsubnet_name }}"
      register: pvtsubnet_result

    ## Create a VPC public route table
    - name: Create Public Route Table
      ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ pubroute_table_name }}"
        subnets: [ "{{ pubsubnet_result.subnet.id }}" ]
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_result.gateway_id }}"
      register: public_route_table

    ## Create a VPC private route table
    - name: Create Private Route Table
      ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ pvtroute_table_name }}"
        subnets: [ "{{ pvtsubnet_result.subnet.id }}" ]
      register: private_route_table

    ## Create a VPC security group
    - name: Create Security Group
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        name: "{{ security_group_name }}"
        description: allow
        tags:
          Name: "{{ security_group_name }}"
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic
      register: security_group_results

    ## Launch EC2 instance
    - name: Launch EC2 Instance
      ec2:
        image: "ami-024ebc7de0fc64e44"
        instance_type: "{{ type }}"
        region: "{{ region }}"
        wait: yes
        count: 1
        state: present
        vpc_subnet_id: "{{ pubsubnet_result.subnet.id }}"
        assign_public_ip: yes
        group_id: "{{ security_group_results.group_id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        key_name: "keypair"
        instance_tags:
          Name: "{{ instance_name }}"
        user_data: |
          #!/bin/bash
          yum update -y
          yum install -y git httpd.x86_64
          systemctl enable httpd
          systemctl start httpd
          git clone https://github.com/dharaniaws/Mario.git /var/www/html/
